package "tonyfettes/tree_sitter/grammar"

import(
  "moonbitlang/core/json"
)

// Values

// Types and methods
pub struct Grammar {
  schema : String
  name : String
  rules : Map[String, Rule]
  extras : Array[Rule]
  supertypes : Array[RuleName]
  reserved : Map[String, Rule]
  precedences : Array[Array[Rule]]
  externals : Array[Rule]
  inline : Array[RuleName]
  conflicts : Array[Array[RuleName]]
  word : RuleName?
}
fn Grammar::from_json(Json) -> Self raise GrammarParseError
impl Show for Grammar
impl ToJson for Grammar
impl @json.FromJson for Grammar

type GrammarParseError
impl Show for GrammarParseError

type PrecType
impl Eq for PrecType
impl Hash for PrecType

type PrecValue
impl Eq for PrecValue
impl Hash for PrecValue
impl Show for PrecValue

pub enum Rule {
  Alias(named~ : Bool, String, Rule)
  Blank
  Symbol(String)
  String(String)
  Repeat(Rule)
  Repeat1(Rule)
  Choice(Array[Rule])
  Seq(Array[Rule])
  Field(name~ : String, Rule)
  Token(immediate~ : Bool, Rule)
  Prec(prec~ : PrecType, value~ : PrecValue, Rule)
  Pattern(String)
}
impl Eq for Rule
impl Hash for Rule
impl Show for Rule

type RuleName
impl Show for RuleName

// Type aliases

// Traits

