package tonyfettes/tree_sitter/grammar

alias @moonbitlang/core/json as @json

// Values

// Types and methods
pub struct Grammar {
  name : String
  rules : Map[String, Rule]
  extras : Array[Rule]
  supertypes : Array[RuleName]
  reserved : Map[String, Rule]
  externals : Array[Rule]
  inline : Array[RuleName]
  conflicts : Array[Array[RuleName]]
  word : RuleName?
}
impl Grammar {
  from_json(Json) -> Self!GrammarParseError
}
impl Show for Grammar
impl ToJson for Grammar
impl @json.FromJson for Grammar

type GrammarParseError
impl Show for GrammarParseError

type Prec
impl Eq for Prec
impl Hash for Prec

pub enum Rule {
  Alias(Bool, String, Rule)
  Blank
  Symbol(String)
  String(String)
  Repeat(Rule)
  Repeat1(Rule)
  Choice(Array[Rule])
  Seq(Array[Rule])
  Field(String, Rule)
  Token(Bool, Rule)
  Prec(Prec, Int, Rule)
  Pattern(String)
}
impl Eq for Rule
impl Hash for Rule
impl Show for Rule

type RuleName
impl Show for RuleName

// Type aliases

// Traits

