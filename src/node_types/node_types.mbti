// Generated using `moon info`, DON'T EDIT IT
package "tonyfettes/tree_sitter/node_types"

import(
  "moonbitlang/core/json"
)

// Values

// Errors

// Types and methods
pub struct ChildType {
  multiple : Bool
  required : Bool
  types : Array[NodeType]
}
impl Show for ChildType
impl ToJson for ChildType

pub struct NodeType {
  type_ : String
  named : Bool
  payload : NodeTypePayload
}
impl Show for NodeType
impl ToJson for NodeType
impl @json.FromJson for NodeType

pub enum NodeTypePayload {
  Empty
  Supertype(subtypes~ : Array[NodeType])
  Normal(fields~ : Map[String, ChildType], children~ : ChildType)
}
impl Show for NodeTypePayload

pub struct NodeTypes(Array[NodeType])
fn NodeTypes::from_json(Json) -> Self raise @json.JsonDecodeError
fn NodeTypes::inner(Self) -> Array[NodeType]
impl Show for NodeTypes
impl ToJson for NodeTypes
impl @json.FromJson for NodeTypes

// Type aliases

// Traits

