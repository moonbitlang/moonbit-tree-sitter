package "tonyfettes/tree_sitter/pattern"

import(
  "moonbitlang/core/string"
  "tonyfettes/tree_sitter"
)

// Values

// Types and methods
type Context
impl Context {
  new(@string.StringView, strip~ : Bool = .., selector~ : @string.StringView) -> Self!ContextError
}

type ContextError

type Entry
impl Entry {
  new(matches~ : @string.StringView, placeholder~ : @string.StringView) -> Self
}

type Language
impl Language {
  compile(Self, @string.StringView) -> Query!ParseError
  language(Self) -> @tree_sitter.Language
  new(@tree_sitter.Language, contexts~ : Map[String, Context], entries~ : Map[String, Entry], extras~ : Array[String] = ..) -> Self
}

type ParseError
impl Show for ParseError

type Query
impl Query {
  matches(Self, @tree_sitter.Node) -> Array[Map[String, Array[String]]]
  search(Self, @string.StringView) -> Array[Map[String, Array[String]]]!
}

// Type aliases

// Traits

