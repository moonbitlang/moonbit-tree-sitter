package "tonyfettes/tree_sitter"

import(
  "moonbitlang/core/builtin"
  "moonbitlang/core/bytes"
  "moonbitlang/core/string"
  "tonyfettes/encoding"
  "tonyfettes/tree_sitter_language"
)

// Values
const LANGUAGE_VERSION : Int = 15

const MIN_COMPATIBLE_LANGUAGE_VERSION : Int = 13

fn parser(Language) -> Parser

// Types and methods
type DecodeResult
impl DecodeResult {
  new(code_point~ : Char, bytes_read~ : Int) -> Self
}

type FieldId

type Input[DecodeFunction]
impl Input {
  new[DecodeFunction : DecodeFunction]((Int, Point) -> @bytes.View, DecodeFunction) -> Self[DecodeFunction]
}

type InputEdit
impl InputEdit {
  new(start_byte~ : Int, old_end_byte~ : Int, new_end_byte~ : Int, start_point~ : Point, old_end_point~ : Point, new_end_point~ : Point) -> Self
}

type InputEncoding
impl InputEncoding {
  custom() -> Self
}

pub(all) type Language @tree_sitter_language.Language
impl Language {
  abi_version(Self) -> Int
  copy(Self) -> Self
  delete(Self) -> Unit
  field_count(Self) -> Int
  field_id_for_name(Self, @string.StringView) -> Int
  field_name_for_id(Self, FieldId) -> String?
  metadata(Self) -> LanguageMetadata
  name(Self) -> String?
  next_state(Self, StateId, Symbol) -> StateId
  state_count(Self) -> Int
  subtypes(Self) -> Array[Symbol]
  supertypes(Self) -> Array[Symbol]
  symbol_count(Self) -> Int
  symbol_for_name(Self, @string.StringView) -> Symbol?
  symbol_name(Self, Symbol) -> String?
  symbol_type(Self, Symbol) -> SymbolType
  #deprecated
  version(Self) -> Int
}

type LanguageMetadata
impl LanguageMetadata {
  major_version(Self) -> Byte
  minor_version(Self) -> Byte
  patch_version(Self) -> Byte
}

pub enum LogType {
  Parse
  Lex
}

type Logger

type LookaheadIterator
impl LookaheadIterator {
  current_symbol(Self) -> Symbol
  current_symbol_name(Self) -> String?
  language(Self) -> Language
  new(Language, StateId) -> Self?
  next(Self) -> Bool
  reset(Self, Language, StateId) -> Bool
  reset_state(Self, StateId) -> Bool
}

type Node
impl Node {
  child(Self, Int) -> Self?
  child_by_field_id(Self, FieldId) -> Self?
  child_by_field_name(Self, @string.StringView) -> Self?
  child_count(Self) -> Int
  child_with_descendant(Self, Self) -> Self?
  children(Self) -> Iter[Self]
  descendant_count(Self) -> Int
  descendant_for_byte_range(Self, Int, Int) -> Self?
  descendant_for_point_range(Self, Point, Point) -> Self?
  edit(Self, InputEdit) -> Unit
  end_byte(Self) -> Int
  end_point(Self) -> Point
  eq(Self, Self) -> Bool
  field_name_for_child(Self, Int) -> String?
  field_name_for_named_child(Self, Int) -> String?
  first_child_for_byte(Self, Int) -> Self?
  first_named_child_for_byte(Self, Int) -> Self?
  grammar_symbol(Self) -> Symbol
  grammar_type(Self) -> String
  has_changes(Self) -> Bool
  has_error(Self) -> Bool
  is_error(Self) -> Bool
  is_extra(Self) -> Bool
  is_missing(Self) -> Bool
  is_named(Self) -> Bool
  is_null(Self) -> Bool
  language(Self) -> Language
  named_child(Self, Int) -> Self?
  named_child_count(Self) -> Int
  named_children(Self) -> Iter[Self]
  named_descendant_for_byte_range(Self, Int, Int) -> Self?
  named_descendant_for_point_range(Self, Point, Point) -> Self?
  next_named_sibling(Self) -> Self?
  next_parse_state(Self) -> StateId
  next_sibling(Self) -> Self?
  next_symbol_names(Self) -> Iter[String]
  next_symbols(Self) -> Iter[Symbol]
  parent(Self) -> Self?
  parse_state(Self) -> StateId
  prev_named_sibling(Self) -> Self?
  prev_sibling(Self) -> Self?
  query(Self, @string.StringView) -> QueryCursor!QueryError
  range(Self) -> Range
  start_byte(Self) -> Int
  start_point(Self) -> Point
  string(Self) -> String
  symbol(Self) -> Symbol
  symbols(Self) -> Iter[Symbol]
  text(Self) -> @string.StringView
  type_(Self) -> String
  walk(Self) -> TreeCursor
}
impl Eq for Node
impl Hash for Node
impl Show for Node
impl ToJson for Node

pub type! ParseError {
  MissingLanguage
  Cancelled
}
impl Show for ParseError

type ParseOptions
impl ParseOptions {
  new((ParseState) -> Bool) -> Self
}

pub struct ParseState {
  current_byte_offset : Int
  has_error : Bool
}

type Parser
impl Parser {
  included_ranges(Self) -> Array[Range]
  language(Self) -> Language?
  logger(Self) -> Logger
  new() -> Self
  parse[Encoding : DecodeFunction](Self, old_tree? : Tree, Input[Encoding], options? : ParseOptions) -> Tree!ParseError
  parse_bytes(Self, old_tree? : Tree, Bytes, encoding~ : @encoding.Encoding) -> Tree!ParseError
  parse_string(Self, old_tree? : Tree, @string.StringView) -> Tree!ParseError
  reset(Self) -> Unit
  set_included_ranges(Self, Array[Range]) -> Bool
  set_language(Self, Language) -> Unit
  set_logger(Self, Logger) -> Unit
}

type Point
impl Point {
  column(Self) -> Int
  new(Int, Int) -> Self
  row(Self) -> Int
}
impl Show for Point

pub enum Quantifier {
  Zero
  ZeroOrOne
  ZeroOrMore
  One
  OneOrMore
}
impl Show for Quantifier

type Query
impl Query {
  capture_count(Self) -> Int
  capture_name_for_id(Self, Int) -> String
  capture_quantifier_for_id(Self, Int, Int) -> Quantifier
  captures(Self, Node) -> Iter[QueryCapture]
  disable_capture(Self, @string.StringView) -> Unit
  disable_pattern(Self, Int) -> Unit
  end_byte_for_pattern(Self, Int) -> Int
  is_pattern_guaranteed_at_step(Self, Int) -> Bool
  is_pattern_non_local(Self, Int) -> Bool
  is_pattern_rooted(Self, Int) -> Bool
  matches(Self, Node) -> Iter[QueryMatch]
  new(Language, @string.StringView) -> Self!QueryError
  pattern_count(Self) -> Int
  predicates_for_pattern(Self, Int) -> Array[Array[QueryPredicateStep]]
  start_byte_for_pattern(Self, Int) -> Int
  string_count(Self) -> Int
  string_value_for_id(Self, Int) -> String
}

type QueryCapture
impl QueryCapture {
  index(Self) -> Int
  name(Self) -> String
  node(Self) -> Node
}
impl Show for QueryCapture
impl ToJson for QueryCapture

type QueryCursor
impl QueryCursor {
  captures(Self) -> Iter[QueryCapture]
  did_exceed_match_limit(Self) -> Bool
  exec(Self, Query, Node, options? : QueryCursorOptions) -> Unit
  match_limit(Self) -> Int
  matches(Self) -> Iter[QueryMatch]
  new() -> Self
  next_capture(Self) -> QueryCapture?
  next_match(Self) -> QueryMatch?
  remove_match(Self, Int) -> Unit
  set_byte_range(Self, Int, Int) -> Unit
  set_match_limit(Self, Int) -> Unit
  set_max_start_depth(Self, Int) -> Unit
  set_point_range(Self, Point, Point) -> Unit
}

type QueryCursorOptions
impl QueryCursorOptions {
  new(progress_callback~ : (QueryCursorState) -> Unit) -> Self
}

pub struct QueryCursorState {
  current_byte_offset : Int
}

type QueryError
impl Show for QueryError

type QueryMatch
impl QueryMatch {
  captures(Self) -> Iter[QueryCapture]
  id(Self) -> Int
  pattern_index(Self) -> Int
  predicates(Self) -> Array[Array[QueryPredicateStep]]
}
impl ToJson for QueryMatch

pub enum QueryPredicateStep {
  Capture(String)
  String(String)
}
impl Show for QueryPredicateStep

type Range
impl Range {
  end_byte(Self) -> Int
  end_point(Self) -> Point
  new(Point, Point, Int, Int) -> Self
  start_byte(Self) -> Int
  start_point(Self) -> Point
}
impl Show for Range

type StateId

type Symbol

type SymbolType

type Tree
impl Tree {
  copy(Self) -> Self
  edit(Self, InputEdit) -> Unit
  get_changed_ranges(Self, Self) -> Array[Range]
  included_ranges(Self) -> Array[Range]
  language(Self) -> Language
  query(Self, @string.StringView) -> QueryCursor!QueryError
  root_node(Self) -> Node
  root_node_with_offset(Self, Int, Point) -> Node
  walk(Self) -> TreeCursor
}

type TreeCursor
impl TreeCursor {
  copy(Self) -> Self
  current_depth(Self) -> Int
  current_descendant_index(Self) -> Int
  current_field_id(Self) -> FieldId
  current_field_name(Self) -> String?
  current_node(Self) -> Node
  goto_descendant(Self, Int) -> Unit
  goto_first_child(Self) -> Bool
  goto_first_child_for_byte(Self, Int) -> Bool
  goto_first_child_for_point(Self, Point) -> Bool
  goto_last_child(Self) -> Bool
  goto_next_sibling(Self) -> Bool
  goto_parent(Self) -> Bool
  goto_previous_sibling(Self) -> Bool
  new(Node) -> Self
  reset(Self, Node) -> Unit
  reset_to(Self, Self) -> Unit
}

// Type aliases
pub typealias Grammar = @tonyfettes/tree_sitter/grammar.Grammar

pub typealias NodeTypes = @tonyfettes/tree_sitter/node_types.NodeTypes

pub typealias QueryPredicate = Array[QueryPredicateStep]

// Traits
pub(open) trait DecodeFunction {
  encoding(Self) -> InputEncoding = _
  decode(@bytes.View) -> DecodeResult?
}
impl DecodeFunction for @encoding.Encoding

