package "tonyfettes/tree_sitter"

import(
  "moonbitlang/core/builtin"
  "moonbitlang/core/bytes"
  "moonbitlang/core/string"
  "tonyfettes/encoding"
  "tonyfettes/tree_sitter_language"
)

// Values
const LANGUAGE_VERSION : Int = 15

const MIN_COMPATIBLE_LANGUAGE_VERSION : Int = 13

fn parser(Language) -> Parser raise LanguageError

// Types and methods
type DecodeResult
fn DecodeResult::new(code_point~ : Char, bytes_read~ : Int) -> Self

type FieldId

type Input[DecodeFunction]
fn[DecodeFunction : DecodeFunction] Input::new((Int, Point) -> @bytes.View, DecodeFunction) -> Self[DecodeFunction]

type InputEdit
fn InputEdit::new(start_byte~ : Int, old_end_byte~ : Int, new_end_byte~ : Int, start_point~ : Point, old_end_point~ : Point, new_end_point~ : Point) -> Self

type InputEncoding
fn InputEncoding::custom() -> Self

pub(all) type Language @tree_sitter_language.Language
fn Language::abi_version(Self) -> Int
fn Language::copy(Self) -> Self
fn Language::delete(Self) -> Unit
fn Language::field_count(Self) -> Int
fn Language::field_id_for_name(Self, @string.StringView) -> Int
fn Language::field_name_for_id(Self, FieldId) -> String?
fn Language::metadata(Self) -> LanguageMetadata
fn Language::name(Self) -> String?
fn Language::next_state(Self, StateId, Symbol) -> StateId
fn Language::state_count(Self) -> Int
fn Language::subtypes(Self) -> Array[Symbol]
fn Language::supertypes(Self) -> Array[Symbol]
fn Language::symbol_count(Self) -> Int
fn Language::symbol_for_name(Self, @string.StringView) -> Symbol?
fn Language::symbol_name(Self, Symbol) -> String?
fn Language::symbol_type(Self, Symbol) -> SymbolType
#deprecated
fn Language::version(Self) -> Int

type LanguageError
impl Show for LanguageError
impl ToJson for LanguageError

type LanguageMetadata
fn LanguageMetadata::major_version(Self) -> Byte
fn LanguageMetadata::minor_version(Self) -> Byte
fn LanguageMetadata::patch_version(Self) -> Byte

pub enum LogType {
  Parse
  Lex
}

type Logger

type LookaheadIterator
fn LookaheadIterator::current_symbol(Self) -> Symbol
fn LookaheadIterator::current_symbol_name(Self) -> String?
fn LookaheadIterator::language(Self) -> Language
fn LookaheadIterator::new(Language, StateId) -> Self?
fn LookaheadIterator::next(Self) -> Bool
fn LookaheadIterator::reset(Self, Language, StateId) -> Bool
fn LookaheadIterator::reset_state(Self, StateId) -> Bool

type Node
fn Node::child(Self, Int) -> Self?
fn Node::child_by_field_id(Self, FieldId) -> Self?
fn Node::child_by_field_name(Self, @string.StringView) -> Self?
fn Node::child_count(Self) -> Int
fn Node::child_with_descendant(Self, Self) -> Self?
fn Node::children(Self) -> Iter[Self]
fn Node::descendant_count(Self) -> Int
fn Node::descendant_for_byte_range(Self, Int, Int) -> Self?
fn Node::descendant_for_point_range(Self, Point, Point) -> Self?
fn Node::edit(Self, InputEdit) -> Unit
fn Node::end_byte(Self) -> Int
fn Node::end_point(Self) -> Point
fn Node::eq(Self, Self) -> Bool
fn Node::field_name_for_child(Self, Int) -> String?
fn Node::field_name_for_named_child(Self, Int) -> String?
fn Node::first_child_for_byte(Self, Int) -> Self?
fn Node::first_named_child_for_byte(Self, Int) -> Self?
fn Node::grammar_symbol(Self) -> Symbol
fn Node::grammar_type(Self) -> String
fn Node::has_changes(Self) -> Bool
fn Node::has_error(Self) -> Bool
fn Node::is_error(Self) -> Bool
fn Node::is_extra(Self) -> Bool
fn Node::is_missing(Self) -> Bool
fn Node::is_named(Self) -> Bool
fn Node::is_null(Self) -> Bool
fn Node::language(Self) -> Language
fn Node::named_child(Self, Int) -> Self?
fn Node::named_child_count(Self) -> Int
fn Node::named_children(Self) -> Iter[Self]
fn Node::named_descendant_for_byte_range(Self, Int, Int) -> Self?
fn Node::named_descendant_for_point_range(Self, Point, Point) -> Self?
fn Node::next_named_sibling(Self) -> Self?
fn Node::next_parse_state(Self) -> StateId
fn Node::next_sibling(Self) -> Self?
fn Node::next_symbol_names(Self) -> Iter[String]
fn Node::next_symbols(Self) -> Iter[Symbol]
fn Node::parent(Self) -> Self?
fn Node::parse_state(Self) -> StateId
fn Node::prev_named_sibling(Self) -> Self?
fn Node::prev_sibling(Self) -> Self?
fn Node::query(Self, @string.StringView) -> QueryCursor raise QueryError
fn Node::range(Self) -> Range
fn Node::start_byte(Self) -> Int
fn Node::start_point(Self) -> Point
fn Node::string(Self) -> String
fn Node::symbol(Self) -> Symbol
fn Node::symbol_names(Self) -> Iter[String]
fn Node::symbols(Self) -> Iter[Symbol]
fn Node::text(Self) -> @string.StringView
fn Node::type_(Self) -> String
fn Node::walk(Self) -> TreeCursor
impl Eq for Node
impl Hash for Node
impl Show for Node
impl ToJson for Node

pub suberror ParseError {
  MissingLanguage
  Cancelled
}
impl Show for ParseError
impl ToJson for ParseError

type ParseOptions
fn ParseOptions::new((ParseState) -> Bool) -> Self

pub struct ParseState {
  current_byte_offset : Int
  has_error : Bool
}

type Parser
fn Parser::included_ranges(Self) -> Array[Range]
fn Parser::language(Self) -> Language?
fn Parser::logger(Self) -> Logger
fn Parser::new() -> Self
fn[Encoding : DecodeFunction] Parser::parse(Self, old_tree? : Tree, Input[Encoding], options? : ParseOptions) -> Tree raise ParseError
fn Parser::parse_bytes(Self, old_tree? : Tree, Bytes, encoding~ : @encoding.Encoding) -> Tree raise ParseError
fn Parser::parse_string(Self, old_tree? : Tree, @string.StringView) -> Tree raise ParseError
fn Parser::reset(Self) -> Unit
fn Parser::set_included_ranges(Self, Array[Range]) -> Bool
fn Parser::set_language(Self, Language) -> Unit raise LanguageError
fn Parser::set_logger(Self, Logger) -> Unit

type Point
fn Point::column(Self) -> Int
fn Point::new(Int, Int) -> Self
fn Point::row(Self) -> Int
impl Show for Point

pub enum Quantifier {
  Zero
  ZeroOrOne
  ZeroOrMore
  One
  OneOrMore
}
impl Show for Quantifier

type Query
fn Query::capture_count(Self) -> Int
fn Query::capture_name_for_id(Self, Int) -> String
fn Query::capture_quantifier_for_id(Self, Int, Int) -> Quantifier
fn Query::captures(Self, Node) -> Iter[QueryCapture]
fn Query::disable_capture(Self, @string.StringView) -> Unit
fn Query::disable_pattern(Self, Int) -> Unit
fn Query::end_byte_for_pattern(Self, Int) -> Int
fn Query::is_pattern_guaranteed_at_step(Self, Int) -> Bool
fn Query::is_pattern_non_local(Self, Int) -> Bool
fn Query::is_pattern_rooted(Self, Int) -> Bool
fn Query::matches(Self, Node) -> Iter[QueryMatch]
fn Query::new(Language, @string.StringView) -> Self raise QueryError
fn Query::pattern_count(Self) -> Int
fn Query::predicates_for_pattern(Self, Int) -> Array[Array[QueryPredicateStep]]
fn Query::start_byte_for_pattern(Self, Int) -> Int
fn Query::string_count(Self) -> Int
fn Query::string_value_for_id(Self, Int) -> String?

type QueryCapture
fn QueryCapture::index(Self) -> Int
fn QueryCapture::name(Self) -> String
fn QueryCapture::node(Self) -> Node
impl Show for QueryCapture
impl ToJson for QueryCapture

type QueryCursor
fn QueryCursor::captures(Self) -> Iter[QueryCapture]
fn QueryCursor::did_exceed_match_limit(Self) -> Bool
fn QueryCursor::exec(Self, Query, Node, options? : QueryCursorOptions) -> Unit
fn QueryCursor::match_limit(Self) -> Int
fn QueryCursor::matches(Self) -> Iter[QueryMatch]
fn QueryCursor::new() -> Self
fn QueryCursor::next_capture(Self) -> QueryCapture?
fn QueryCursor::next_match(Self) -> QueryMatch?
fn QueryCursor::remove_match(Self, Int) -> Unit
fn QueryCursor::set_byte_range(Self, Int, Int) -> Unit
fn QueryCursor::set_match_limit(Self, Int) -> Unit
fn QueryCursor::set_max_start_depth(Self, Int) -> Unit
fn QueryCursor::set_point_range(Self, Point, Point) -> Unit

type QueryCursorOptions
fn QueryCursorOptions::new(progress_callback~ : (QueryCursorState) -> Unit) -> Self

pub struct QueryCursorState {
  current_byte_offset : Int
}

type QueryError
impl Show for QueryError
impl ToJson for QueryError

type QueryMatch
fn QueryMatch::captures(Self) -> Iter[QueryCapture]
fn QueryMatch::id(Self) -> Int
fn QueryMatch::pattern_index(Self) -> Int
fn QueryMatch::predicates(Self) -> Array[Array[QueryPredicateStep]]
impl ToJson for QueryMatch

pub enum QueryPredicateStep {
  Capture(String)
  String(String)
}
impl Show for QueryPredicateStep
impl ToJson for QueryPredicateStep

type Range
fn Range::end_byte(Self) -> Int
fn Range::end_point(Self) -> Point
fn Range::new(Point, Point, Int, Int) -> Self
fn Range::start_byte(Self) -> Int
fn Range::start_point(Self) -> Point
impl Show for Range

type StateId

type Symbol

type SymbolType

type Tree
fn Tree::copy(Self) -> Self
fn Tree::edit(Self, InputEdit) -> Unit
fn Tree::get_changed_ranges(Self, Self) -> Array[Range]
fn Tree::included_ranges(Self) -> Array[Range]
fn Tree::language(Self) -> Language
fn Tree::query(Self, @string.StringView) -> QueryCursor raise QueryError
fn Tree::root_node(Self) -> Node
fn Tree::root_node_with_offset(Self, Int, Point) -> Node
fn Tree::walk(Self) -> TreeCursor

type TreeCursor
fn TreeCursor::copy(Self) -> Self
fn TreeCursor::current_depth(Self) -> Int
fn TreeCursor::current_descendant_index(Self) -> Int
fn TreeCursor::current_field_id(Self) -> FieldId
fn TreeCursor::current_field_name(Self) -> String?
fn TreeCursor::current_node(Self) -> Node
fn TreeCursor::goto_descendant(Self, Int) -> Unit
fn TreeCursor::goto_first_child(Self) -> Bool
fn TreeCursor::goto_first_child_for_byte(Self, Int) -> Bool
fn TreeCursor::goto_first_child_for_point(Self, Point) -> Bool
fn TreeCursor::goto_last_child(Self) -> Bool
fn TreeCursor::goto_next_sibling(Self) -> Bool
fn TreeCursor::goto_parent(Self) -> Bool
fn TreeCursor::goto_previous_sibling(Self) -> Bool
fn TreeCursor::new(Node) -> Self
fn TreeCursor::reset(Self, Node) -> Unit
fn TreeCursor::reset_to(Self, Self) -> Unit

// Type aliases
pub typealias Grammar = @tonyfettes/tree_sitter/grammar.Grammar

pub typealias NodeTypes = @tonyfettes/tree_sitter/node_types.NodeTypes

pub typealias QueryPredicate = Array[QueryPredicateStep]

// Traits
pub(open) trait DecodeFunction {
  encoding(Self) -> InputEncoding = _
  decode(@bytes.View) -> DecodeResult?
}
impl DecodeFunction for @encoding.Encoding

