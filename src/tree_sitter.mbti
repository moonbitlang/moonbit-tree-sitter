package tonyfettes/tree_sitter

alias @moonbitlang/core/builtin as @builtin
alias @tonyfettes/tree_sitter_language as @tree_sitter_language

// Values

// Types and methods
type FieldId

type Input[DecodeFunction]
impl Input {
  new[DecodeFunction]((UInt, Point) -> Bytes, DecodeFunction) -> Self[DecodeFunction]
}

type InputEdit
impl InputEdit {
  new(UInt, UInt, UInt, Point, Point, Point) -> Self
}

pub(all) enum InputEncoding {
  UTF8
  UTF16LE
  UTF16BE
  Custom
}

pub(all) type Language @tree_sitter_language.Language
impl Language {
  abi_version(Self) -> UInt
  copy(Self) -> Self
  delete(Self) -> Unit
  field_id_for_name(Self, String) -> UInt
  load(String, String) -> Self?
  name(Self) -> String
  state_count(Self) -> UInt
  subtypes(Self) -> Array[Symbol]
  supertypes(Self) -> Array[Symbol]
  symbol_count(Self) -> UInt
  symbol_for_name(Self, String) -> Symbol
  symbol_name(Self, Symbol) -> String
  symbol_type(Self, Symbol) -> SymbolType
  version(Self) -> UInt
}

type LanguageMetadata
impl LanguageMetadata {
  major_version(Self) -> Byte
  minor_version(Self) -> Byte
  patch_version(Self) -> Byte
}

pub enum LogType {
  Parse
  Lex
}

type Logger

type LookaheadIterator
impl LookaheadIterator {
  current_symbol(Self) -> Symbol
  current_symbol_name(Self) -> String
  delete(Self) -> Unit
  language(Self) -> Language
  new(Language, StateId) -> Self
  next(Self) -> Bool
  reset(Self, Language, StateId) -> Unit
  reset_state(Self, StateId) -> Unit
}

type Node
impl Node {
  child(Self, UInt) -> Self?
  child_by_field_id(Self, FieldId) -> Self?
  child_by_field_name(Self, String) -> Self?
  child_count(Self) -> UInt
  child_with_descendant(Self, Self) -> Self?
  descendant_count(Self) -> UInt
  descendant_for_byte_range(Self, UInt, UInt) -> Self?
  descendant_for_point_range(Self, Point, Point) -> Self?
  edit(Self, InputEdit) -> Unit
  end_byte(Self) -> UInt
  end_point(Self) -> Point
  eq(Self, Self) -> Bool
  field_name_for_child(Self, UInt) -> String
  field_name_for_named_child(Self, UInt) -> String
  first_child_for_byte(Self, UInt) -> Self?
  first_named_child_for_byte(Self, UInt) -> Self?
  grammar_symbol(Self) -> Symbol
  grammar_type(Self) -> String
  has_changes(Self) -> Bool
  has_error(Self) -> Bool
  is_error(Self) -> Bool
  is_extra(Self) -> Bool
  is_missing(Self) -> Bool
  is_named(Self) -> Bool
  language(Self) -> Language
  named_child(Self, UInt) -> Self?
  named_child_count(Self) -> UInt
  next_named_sibling(Self) -> Self?
  next_parse_state(Self) -> StateId
  next_sibling(Self) -> Self?
  parent(Self) -> Self?
  parse_state(Self) -> StateId
  prev_named_sibling(Self) -> Self?
  prev_sibling(Self) -> Self?
  start_byte(Self) -> UInt
  start_point(Self) -> Point
  string(Self) -> String
  symbol(Self) -> Symbol
  type_(Self) -> String
}

type ParseOptions
impl ParseOptions {
  new((ParseState) -> Bool) -> Self
}

pub struct ParseState {
  current_byte_offset : UInt
  has_error : Bool
}

type Parser
impl Parser {
  delete(Self) -> Unit
  included_ranges(Self) -> Array[Range]
  logger(Self) -> Logger
  new() -> Self
  parse[Encoding : DecodeFunction](Self, Tree?, Input[Encoding], options? : ParseOptions) -> Tree
  parse_bytes(Self, Tree?, Bytes, InputEncoding?) -> Tree
  parse_string(Self, Tree?, String) -> Tree
  reset(Self) -> Unit
  set_included_ranges(Self, Array[Range]) -> Unit
  set_language(Self, Language) -> Unit
  set_logger(Self, Logger) -> Unit
}

type Point
impl Point {
  column(Self) -> UInt
  new(UInt, UInt) -> Self
  row(Self) -> UInt
}

pub enum Quantifier {
  Zero
  ZeroOrOne
  ZeroOrMore
  One
  OneOrMore
}

type Query
impl Query {
  capture_count(Self) -> UInt
  capture_name_for_id(Self, UInt) -> String
  capture_quantifier_for_id(Self, UInt, UInt) -> Quantifier
  delete(Self) -> Unit
  disable_capture(Self, String) -> Unit
  disable_pattern(Self, UInt) -> Unit
  end_byte_for_pattern(Self, UInt) -> UInt
  is_pattern_guaranteed_at_step(Self, UInt) -> Bool
  is_pattern_non_local(Self, UInt) -> Bool
  is_pattern_rooted(Self, UInt) -> Bool
  new(Language, String) -> Self!QueryError
  pattern_count(Self) -> UInt
  predicates_for_pattern(Self, UInt) -> Array[QueryPredicateStep]
  start_byte_for_pattern(Self, UInt) -> UInt
  string_count(Self) -> UInt
  string_value_for_id(Self, UInt) -> String
}

pub struct QueryCapture {
  node : Node
  index : UInt
}

type QueryCursor
impl QueryCursor {
  delete(Self) -> Unit
  did_exceed_match_limit(Self) -> Bool
  exec(Self, Query, Node, options? : QueryCursorOptions) -> Unit
  match_limit(Self) -> UInt
  new() -> Self
  next_capture(Self) -> QueryCapture?
  next_match(Self) -> QueryMatch?
  remove_match(Self, UInt) -> Unit
  set_byte_range(Self, UInt, UInt) -> Unit
  set_match_limit(Self, UInt) -> Unit
  set_max_start_depth(Self, UInt) -> Unit
  set_point_range(Self, Point, Point) -> Unit
}

pub(all) struct QueryCursorOptions {
  progress_callback : (QueryCursorState) -> Unit
}

pub struct QueryCursorState {
  current_byte_offset : UInt
}

type QueryError
impl Show for QueryError

pub struct QueryMatch {
  id : UInt
  pattern_index : UInt
  captures : FixedArray[QueryCapture]
}

pub struct QueryPredicateStep {
  type_ : QueryPredicateStepType
  value : UInt
}

pub enum QueryPredicateStepType {
  Done
  Capture
  String
}

type Range
impl Range {
  new(Point, Point, UInt, UInt) -> Self
}

type StateId

type Symbol

type SymbolType
impl SymbolType {
  of_int(UInt) -> Self
  to_int(Self) -> UInt
}

type Tree
impl Tree {
  changed_ranges(Self, Self) -> Array[Range]
  copy(Self) -> Self
  delete(Self) -> Unit
  edit(Self, InputEdit) -> Self
  language(Self) -> Language
  root_node(Self) -> Node
  root_node_with_offset(Self, UInt) -> Node
}

type TreeCursor
impl TreeCursor {
  copy(Self) -> Self
  current_depth(Self) -> UInt
  current_descendant_index(Self) -> UInt
  current_field_id(Self) -> FieldId
  current_field_name(Self) -> Bytes
  current_node(Self) -> Node
  delete(Self) -> Unit
  goto_descendant(Self, UInt) -> Unit
  goto_first_child(Self) -> Bool
  goto_first_child_for_byte(Self, UInt) -> Bool
  goto_first_child_for_point(Self, Point) -> Bool
  goto_last_child(Self) -> Bool
  goto_next_sibling(Self) -> Bool
  goto_parent(Self) -> Bool
  goto_previous_sibling(Self) -> Bool
  new(Node) -> Self
  reset(Self, Node) -> Unit
  reset_to(Self, Self) -> Unit
}

// Type aliases
pub typealias Grammar = @tonyfettes/tree_sitter/grammar.Grammar

pub typealias NodeTypes = @tonyfettes/tree_sitter/node_types.NodeTypes

// Traits
pub(open) trait DecodeFunction {
  input_encoding(Self) -> InputEncoding
  decode(Bytes, Int) -> Int
}
impl DecodeFunction::input_encoding

