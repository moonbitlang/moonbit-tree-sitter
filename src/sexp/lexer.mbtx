{
enum Token {
  LPAREN
  RPAREN
  LBRACE
  RBRACE
  LBRACKET
  RBRACKET
  COLON
  SYMBOL(String)
  NUMBER(Double)
  STRING(String)
  EOF
} derive(Eq, Show)

enum TokenKind {
  TK_LPAREN
  TK_RPAREN
  TK_LBRACE
  TK_RBRACE
  TK_LBRACKET
  TK_RBRACKET
  TK_COLON
  TK_SYMBOL
  TK_NUMBER
  TK_STRING
  TK_EOF
} derive (Eq, Show)

type! LexError {
  InvalidNumber(String, @json.ParseError)
  UnterminatedString
  UnrecognizedCharacter(String)
} derive(Show)

fn parse_number(string : String) -> Double!@json.ParseError {
  guard @json.parse!(string) is Number(number)
  number
}
}

rule token() -> (Token, Position, Position)!LexError {
  parse {
    [' ' '\t' '\r' '\n'] => { token!(lexbuf) }
    ('-'? ('0' | ['1'-'9'] ['0'-'9']* ('.' ['0'-'9']+)?) (['E' 'e'] ['+' '-']? ['0'-'9']+)?) as t => {
      let number = try parse_number!(t) catch {
        error => raise(InvalidNumber(t, error))
      }
      (NUMBER(number), $startpos(t), $endpos(t))
    }
    '"' as t => {
      let buf = StringBuilder::new()
      buf.write_string(t)
      let endpos = double_quoted_string!(buf, lexbuf)
      (STRING(buf.to_string()), $startpos(t), endpos)
    }
    '\'' as t => {
      let buf = StringBuilder::new()
      buf.write_string(t)
      let endpos = single_quoted_string!(buf, lexbuf)
      (STRING(buf.to_string()), $startpos(t), endpos)
    }
    '(' as t => { (LPAREN, $startpos(t), $endpos(t)) }
    ')' as t => { (RPAREN, $startpos(t), $endpos(t)) }
    '{' as t => { (LBRACE, $startpos(t), $endpos(t)) }
    '}' as t => { (RBRACE, $startpos(t), $endpos(t)) }
    '[' as t => { (LBRACKET, $startpos(t), $endpos(t)) }
    ']' as t => { (RBRACKET, $startpos(t), $endpos(t)) }
    ':' as t => { (COLON, $startpos(t), $endpos(t)) }
    (['a'-'z' 'A'-'Z' '_'] ['a'-'z' 'A'-'Z' '0'-'9' '_']*) as t => {
      (SYMBOL(t), $startpos(t), $endpos(t))
    }
    _ as t => { raise(UnrecognizedCharacter(t)) }
    "" as t => { (EOF, $startpos(t), $endpos(t)) }
  }
}

rule double_quoted_string(buf : StringBuilder) -> Position!LexError {
  parse {
    '"' as t => {
      buf.write_string(t)
      $endpos(t)
    }
    ( '\\' '"') as t => {
      buf.write_string(t)
      double_quoted_string!(buf, lexbuf)
    }
    _ as t => {
      buf.write_string(t)
      double_quoted_string!(buf, lexbuf)
    }
    "" => { raise(UnterminatedString) }
  }
}

rule single_quoted_string(buf : StringBuilder) -> Position!LexError {
  parse {
    '\'' as t => {
      buf.write_string(t)
      $endpos(t)
    }
    ( '\\' '\'') as t => {
      buf.write_string(t)
      single_quoted_string!(buf, lexbuf)
    }
    _ as t => {
      buf.write_string(t)
      single_quoted_string!(buf, lexbuf)
    }
    "" => { raise(UnterminatedString) }
  }
}

{
}
