package "tonyfettes/tree_sitter/sexp"

import(
  "moonbitlang/core/string"
)

// Values
fn parse(@string.StringView) -> Array[Sexp]!SexpError

fn prettify(@string.StringView) -> @string.StringView!SexpError

fn pretty(Array[Sexp]) -> Array[Sexp]

fn pretty_to(Array[Sexp], Array[Sexp]) -> Unit

fn print(Array[Sexp]) -> String

fn print_to(Array[Sexp], &Logger, indent~ : Int = ..) -> Unit

// Types and methods
pub enum Atom {
  Symbol(String)
  String(String)
  Concat
  Capture(String)
  Command(String)
  Comment(String)
  Newline
}
impl Eq for Atom
impl Show for Atom
impl ToJson for Atom

type List
impl List {
  new(open~ : Char = .., Array[Sexp], close~ : Char = .., quantifier~ : Quantifier = ..) -> Self
}
impl Eq for List
impl Show for List
impl ToJson for List

pub enum Quantifier {
  ZeroOrOne
  ZeroOrMore
  One
  OneOrMore
}
impl Quantifier {
  from_char(Char) -> Self!SexpError
}
impl Eq for Quantifier
impl Show for Quantifier
impl ToJson for Quantifier

pub enum Sexp {
  Atom(Atom)
  Pair(String, Sexp)
  List(List)
}
impl Sexp {
  list(open~ : Char = .., Array[Self], close~ : Char = .., quantifier~ : Quantifier = ..) -> Self
  parse(@string.StringView) -> Self!SexpError
  pretty(Self) -> Self
  print_to(Self, &Logger, indent~ : Int = ..) -> Unit
}
impl Eq for Sexp
impl Show for Sexp
impl ToJson for Sexp

pub type! SexpError {
  UnrecognizedCharacter(@string.StringView)
  UnterminatedString(@string.StringView)
  UnterminatedList(@string.StringView)
  MissingValue(@string.StringView)
  ExtraContent(ArrayView[Sexp])
  InvalidPairKey(@string.StringView)
  InvalidQuantifier(Char)
}
impl Show for SexpError

// Type aliases

// Traits

