// Generated using `moon info`, DON'T EDIT IT
package "tonyfettes/tree_sitter/sexp"

import(
  "moonbitlang/core/string"
)

// Values
fn parse(@string.StringView) -> Array[Sexp] raise SexpError

fn print(Array[Sexp]) -> String

fn print_to(ArrayView[Sexp], &Logger, indent? : Int) -> Unit

// Errors
pub suberror SexpError {
  UnrecognizedCharacter(@string.StringView)
  UnterminatedString(@string.StringView)
  UnterminatedList(@string.StringView)
  ExtraContent(ArrayView[Sexp])
  InvalidPairKey(@string.StringView)
  InvalidQuantifier(Char)
  InvalidCommand(@string.StringView)
}
impl Show for SexpError

// Types and methods
pub enum Atom {
  Field(String)
  Symbol(String)
  String(String)
  Narrow(String)
  Anchor
  Capture(String)
  Comment(String)
  Predicate(String)
  Directive(String)
}
impl Eq for Atom
impl Show for Atom

pub enum Delimiter {
  Bracket
  Parenthesis
  Brace
}
impl Eq for Delimiter
impl Show for Delimiter

pub enum Quantifier {
  ZeroOrOne
  ZeroOrMore
  One
  OneOrMore
}
fn Quantifier::from_char(Char) -> Self raise SexpError
impl Eq for Quantifier
impl Show for Quantifier
impl ToJson for Quantifier

pub enum Sexp {
  Atom(Atom)
  List(Array[Sexp], delimiter~ : Delimiter, mut quantifier~ : Quantifier)
}
fn Sexp::list(Array[Self], delimiter? : Delimiter, quantifier? : Quantifier) -> Self
fn Sexp::parse(@string.StringView) -> Self raise SexpError
fn Sexp::print_to(Self, &Logger, indent? : Int) -> Unit
impl Eq for Sexp
impl Show for Sexp
impl ToJson for Sexp

// Type aliases

// Traits

