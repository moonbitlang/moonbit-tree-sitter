package "tonyfettes/tree_sitter/query_language"

import(
  "moonbitlang/core/string"
  "tonyfettes/tree_sitter"
)

// Values
fn parse(Parser, @string.StringView) -> String!ParseError

// Types and methods
type Context
impl Context {
  new(@string.StringView, strip~ : Bool = .., selector~ : @string.StringView) -> Self!ContextError
}

type ContextError

type Entry
impl Entry {
  new(matches~ : @string.StringView, replace? : @string.StringView, placeholder~ : @string.StringView) -> Self
}

type ParseError
impl Show for ParseError

type Parser
impl Parser {
  language(Self) -> @tree_sitter.Language
  new(@tree_sitter.Language, contexts~ : Map[String, Context], entries~ : Map[String, Entry], extras~ : Array[String] = ..) -> Self
  parse(Self, @string.StringView) -> String!ParseError
  parser(Self) -> @tree_sitter.Parser
}

// Type aliases

// Traits

